using IronOcr;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ScreenshotsIntoStrings
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        public void wait(int milliseconds)
        {
            var timer1 = new System.Windows.Forms.Timer();
            if (milliseconds == 0 || milliseconds < 0) return;

            // Console.WriteLine("start wait timer");
            timer1.Interval = milliseconds;
            timer1.Enabled = true;
            timer1.Start();

            timer1.Tick += (s, e) =>
            {
                timer1.Enabled = false;
                timer1.Stop();
                // Console.WriteLine("stop wait timer");
            };

            while (timer1.Enabled)
            {
                Application.DoEvents();
            }
        }
        private void btnCaptureOne_Click(object sender, EventArgs e)
        {
            while (true)
            {
                string team;

                Bitmap bitmap = new Bitmap(750, 80);
                Graphics g = Graphics.FromImage(bitmap);
                g.CopyFromScreen(600, 0, 0, 0, bitmap.Size);
                pictureBox1.Image = bitmap;

                wait(150);
                pictureBox1.Image.Save("D://OBG/TournamentExperimentation/test.png", ImageFormat.Png);
                wait(150);

                //Blue Towers
                Bitmap bp = new Bitmap(35, 40);
                Graphics f = Graphics.FromImage(bp);
                f.CopyFromScreen(670, 10, 0, 0, bp.Size);
                pbBTowers.Image = bp;
                pbBTowers.Image.Save("D://OBG/TournamentExperimentation/btowers.png", ImageFormat.Png);
                wait(150);

                ImageToString("D://OBG/TournamentExperimentation/btowers.png", "Towers", "blue");

                //Blue Gold
                bp = new Bitmap(70, 30);
                f = Graphics.FromImage(bp);
                f.CopyFromScreen(755, 10, 0, 0, bp.Size);
                pbBGold.Image = bp;
                pbBGold.Image.Save("D://OBG/TournamentExperimentation/bgold.png", ImageFormat.Png);
                wait(150);

                ImageToString("D://OBG/TournamentExperimentation/bgold.png", "Gold", "blue");


                //Blue Kills
                bp = new Bitmap(45, 50);
                f = Graphics.FromImage(bp);
                f.CopyFromScreen(900, 10, 0, 0, bp.Size);
                pbBKills.Image = bp;
                pbBKills.Image.Save("D://OBG/TournamentExperimentation/bkills.png", ImageFormat.Png);
                wait(150);

                ImageToString("D://OBG/TournamentExperimentation/bkills.png", "Kills", "blue");

                //Red Kills
                bp = new Bitmap(55, 45);
                f = Graphics.FromImage(bp);
                f.CopyFromScreen(979, 10, 0, 0, bp.Size);
                pbRKills.Image = bp;
                pbRKills.Image.Save("D://OBG/TournamentExperimentation/rkills.png", ImageFormat.Png);
                wait(150);

                ImageToString("D://OBG/TournamentExperimentation/rkills.png", "Kills", "red");
            }
        }
    public void ImageToString(string image, string type, string team)
        {
            var Ocr = new IronTesseract();
            Ocr.Configuration.BlackListCharacters = "~`$#^*_}{][|\\@";
            Ocr.Configuration.PageSegmentationMode = TesseractPageSegmentationMode.Auto;
            Ocr.Configuration.TesseractVersion = TesseractVersion.Tesseract5;
            Ocr.Configuration.EngineMode = TesseractEngineMode.LstmOnly;
            //Ocr.Language = OcrLanguage.Custom = "0123456789.k";
            Ocr.UseCustomTesseractLanguageFile("0123456789");
            
            using (var Input = new OcrInput(@image))
            {
                var Result = Ocr.Read(Input);
                OcrResult.

                switch (type)
                {
                    case "Towers":
                        Towers(team, Result.Text);
                        if (team == "blue") btowers.Text = Result.Text;
                        else rtowers.Text = Result.Text;
                        break;

                    case "Kills":
                        Kills(team, Result.Text);
                        if (team == "blue") bkills.Text = Result.Text;
                        else rkills.Text = Result.Text;

                        break;

                    case "Gold":
                        Gold(team, Result.Text);
                        if (team == "blue") bgold.Text = Result.Text;
                        else rgold.Text = Result.Text;

                        break;
                }
            }
        }



public static async Task Towers(string team, string txt)
        {
            File.WriteAllText($"D://OBG/TournamentExperimentation/data/{team}_towers.txt", txt);
        }
        public static async Task Kills(string team, string txt)
        {
            File.WriteAllText($"D://OBG/TournamentExperimentation/data/{team}_kills.txt", txt);
        }
        public static async Task Gold(string team, string txt)
        {
            File.WriteAllText($"D://OBG/TournamentExperimentation/data/{team}_gold.txt", txt);
        }
        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void btnDie_Click(object sender, EventArgs e)
        {

        }
    }
}
